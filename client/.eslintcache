[{"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/index.js":"1","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/reportWebVitals.js":"2","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/ConsoleApp.js":"3","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/store/configureStore.js":"4","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/MainPage.js":"5","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/reducers/resources.js":"6","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/CustomResourceInfo.js":"7","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/DetailsPage.js":"8","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/types.js":"9","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/navigation/Navigation.js":"10","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/header/Header.js":"11","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/InstancesetDetailsTable.js":"12","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/HaconfigTable.js":"13","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/InstanceTable.js":"14","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/BackupTable.js":"15"},{"size":896,"mtime":1606095994041,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1605835000477,"results":"18","hashOfConfig":"17"},{"size":284,"mtime":1606112947979,"results":"19","hashOfConfig":"17"},{"size":178,"mtime":1606093463275,"results":"20","hashOfConfig":"17"},{"size":1752,"mtime":1608104454160,"results":"21","hashOfConfig":"17"},{"size":1294,"mtime":1606703501491,"results":"22","hashOfConfig":"17"},{"size":3982,"mtime":1608104454157,"results":"23","hashOfConfig":"17"},{"size":3281,"mtime":1608104454158,"results":"24","hashOfConfig":"17"},{"size":241,"mtime":1606093262956,"results":"25","hashOfConfig":"17"},{"size":7648,"mtime":1608104454156,"results":"26","hashOfConfig":"17"},{"size":3448,"mtime":1607272714686,"results":"27","hashOfConfig":"17"},{"size":20066,"mtime":1608268590195,"results":"28","hashOfConfig":"17"},{"size":21041,"mtime":1608104454159,"results":"29","hashOfConfig":"17"},{"size":19496,"mtime":1608104454159,"results":"30","hashOfConfig":"17"},{"size":17605,"mtime":1608104454157,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"188efv",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"35"},"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/index.js",["72"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ConsoleApp from './components/ConsoleApp';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, createStore} from \"redux\";\n\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {rootReducer} from \"./store/configureStore\";\n\nconst store = createStore(rootReducer, composeWithDevTools(\n    // applyMiddleware(...middleware),\n));\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <ConsoleApp />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["73","74"],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/reportWebVitals.js",[],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/ConsoleApp.js",[],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/store/configureStore.js",[],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/MainPage.js",["75","76","77","78"],"import Header from \"../components/header/Header\";\nimport Navigation from \"../components/navigation/Navigation\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport CustomResourceInfo from \"./CustomResourceInfo\";\nimport DetailsPage from \"./DetailsPage\";\n\nconst ContainerFragment = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst useStyles = makeStyles(theme => ({\n    margin: {\n        margin: theme.spacing(100),\n    }\n}));\n\n\nfunction MainPage() {\n\n    const classes = useStyles();\n    const [breadcrumb, setBreadcrumb] = React.useState('');\n    const [navopen, isNavOpen] = React.useState(true);\n    const [change, onchange] = React.useState();\n\n\n    function switchComponent(breadcrumb) {\n        switch (breadcrumb) {\n            case \"\":\n            case \"커스텀 리소스,DashBoard\":\n                return <CustomResourceInfo />\n            case \"커스텀 리소스,Instanceset\":\n                return <DetailsPage resource={\"instanceset\"}/>\n            case \"커스텀 리소스,Instances\":\n                return <DetailsPage resource={\"instance\"}/>\n            case \"커스텀 리소스,haconfigs\":\n                return <DetailsPage resource={\"haconfig\"}/>\n            case \"커스텀 리소스,backup\":\n                return <DetailsPage resource={\"backup\"}/>\n            default:\n                return <></>\n        }\n    }\n\n\n    return <>\n            <Header breadcrumb={breadcrumb} isnavopen={isNavOpen} navopen={navopen}></Header>\n            <Navigation setBreadcrumb={setBreadcrumb} navopen={navopen}></Navigation>\n            {\n               switchComponent(breadcrumb)\n            }\n    </>\n}\n\nexport default MainPage;\n","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/reducers/resources.js",[],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/CustomResourceInfo.js",["79","80","81","82","83","84"],"import {makeStyles} from \"@material-ui/core/styles\";\nimport React, { useState, useEffect} from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport {Typography} from \"@material-ui/core\";\nimport {ArgumentAxis, BarSeries, Chart, LineSeries, ValueAxis} from \"@devexpress/dx-react-chart-material-ui\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport styled from \"styled-components\";\n\nimport axios from 'axios';\n\nconst customresources = {\n    \"TotalInstanceset\": \"InstanceSet\",\n    \"TotalInstance\": \"Instances\",\n    \"TotalBackup\": \"Backup\",\n    \"TotalLocalPVSize\": \"Total Local PV Size\",\n\n}\n\nconst Abnormalsources = {\n    \"AbnormalLocalPV\": \"Abnormal Local PV\",\n    \"AbnormalInstance\": \"Abnormal Instance\",\n    \"AbnormalBackup\": \"Abnoraml Backup\",\n    \"RunningBackup\": \"Running Backup\"\n}\n\n\nconst StyledCardContent = styled(CardContent)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-contents: center;\n`;\n\n\nconst generatedata = (n) => {\n    const ret = [];\n    let y = 0;\n    for (let i = 0; i < n; i += 1) {\n        y += Math.round(Math.random() * 10 - 5);\n        ret.push({ x: i, y });\n    }\n    return ret;\n};\n\nconst test_data = generatedata(100)\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        // marginTop: \"10em\",\n        marginBottom: \"2em\",\n        marginRight: \"2em\",\n        // marginLeft: \"8em\",\n        border: \"1px solid black\",\n        width: \"20em\",\n    },\n    container: {\n        width: \"100%\",\n        paddingLeft: \"20em\",\n        // paddingTop: \"10em\",\n        paddingRight: \"0px\",\n        // position: \"static\",\n        display: \"flex\",\n        // flexDirection: \"column\",\n        // marginRight: \"6em\"\n    },\n\n    resourceTable: {\n        width: \"12em\",\n        // marginRight: \"2em\"\n    },\n    usage: {\n        display: \"flex\",\n        width: \"100%\",\n        justifyContent: \"space-around\"\n    }\n}))\n\n\n\nfunction CustomResourceInfo() {\n\n    const classes = useStyles();\n\n    const [ datas, setDatas ] = useState([])\n\n    useEffect(()=>{\n        const getData = async () => {\n            try {\n                const response = await axios.get(\"http://localhost:8080/all\")\n                console.log(response)\n                setDatas(response.data)\n            } catch(e){\n                console.log(e);\n            }\n        }\n        getData()\n    },[])\n\n    return <>\n            <Container className={classes.container} maxWidth={false}\n                style={{\n                    paddingTop: \"10em\"\n                }}\n            >\n\n            {\n                Object.entries(customresources).map((e, index)=>{\n                    return <Card className={classes.card} key={e}>\n                        <StyledCardContent>\n                            <Typography variant={\"h6\"}>\n                                {e[1]}\n                            </Typography>\n                            <Typography variant={\"h5\"}>\n                                {datas[e[0]]}\n                            </Typography>\n                        </StyledCardContent>\n                    </Card>\n                })\n            }\n            </Container>\n            <Container className={classes.container} maxWidth={false}\n            >\n\n                {\n                    Object.entries(Abnormalsources).map((e, index)=>{\n                        return <Card className={classes.card} key={e}>\n                            <StyledCardContent>\n                                <Typography variant={\"h6\"}>\n                                    {e[1]}\n                                </Typography>\n                                <Typography variant={\"h5\"}>\n                                    {datas[e[0]]}\n                                </Typography>\n                            </StyledCardContent>\n                        </Card>\n                    })\n                }\n            </Container>\n\n        </>\n\n}\n\nexport default CustomResourceInfo;","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/DetailsPage.js",["85"],"import React, {useEffect, useState} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Container, FormControl, Typography} from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InstancesetDetailsTable from \"./InstancesetDetailsTable\";\nimport axios from 'axios';\nimport InstanceTable from \"./InstanceTable\";\nimport HaconfigTable from \"./HaconfigTable\";\nimport BackupTable from \"./BackupTable\";\n\n\nconst useStyles = makeStyles((theme)=>({\n    container: {\n        width: \"100%\",\n        paddingLeft: \"25em\",\n        // paddingTop: \"10em\",\n        paddingRight: \"0px\",\n        // position: \"static\",\n        display: \"flex\",\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        // minWidth: 120,\n        display: \"flex\",\n        flexDirection: \"row\"\n    },\n    selectEmpty: {\n        // marginTop: theme.spacing(2),\n        width: '8em',\n        marginLeft: theme.spacing(3),\n    },\n}))\n\n\nfunction DetailsPage(props) {\n\n    const classes = useStyles();\n\n    const { resource } = props;\n\n    const [namespaces, setNamespaces] = useState([]);\n    const [namespace, setNamespace] = useState(\"\");\n\n    function switchResource(resource){\n        switch(resource){\n            case \"instanceset\":\n                return <InstancesetDetailsTable namespace={namespace}/>\n            case 'instance':\n                return <InstanceTable namespace={namespace} />\n            case 'haconfig':\n                return <HaconfigTable namespace={namespace} />\n            case 'backup':\n                return <BackupTable namespace={namespace} />\n        }\n    }\n\n\n    useEffect(()=>{\n        const callNamespace = async () => {\n            try {\n                const response = await axios.get(\"http://localhost:8080/namespace\")\n                // setNamespaces()\n                // console.log(callNamespace)\n                setNamespaces(response.data)\n            }\n            catch (e){\n                console.log(e)\n            }\n        }\n\n        callNamespace()\n    }, [])\n\n    const handleChange = (event) =>{\n      setNamespace(event.target.value)\n    };\n\n    return (\n        <>\n           <Container className={classes.container} maxWidth={false} style={{\n               paddingTop: \"10em\"\n           }}>\n               <FormControl className={classes.formControl} >\n                   <Typography>\n                       Namespace:\n                   </Typography>\n                   <Select\n                    value={namespace}\n                    onChange={handleChange}\n                    displayEmpty\n                    className={classes.selectEmpty}\n                    inputProps={{\n                        'aria-label': 'Without label'\n                    }}\n                   >\n                       {\n                           namespaces.map((e)=>{\n                               return <MenuItem value={e}>{e}</MenuItem>\n                           })\n                       }\n                   </Select>\n               </FormControl>\n           </Container>\n            <Container className={classes.container} maxWidth={false}>\n                {switchResource(resource)}\n            </Container>\n\n        </>\n    )\n}\n\nexport default DetailsPage;","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/types.js",[],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/navigation/Navigation.js",["86","87"],"import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport {Toolbar} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport styled from \"styled-components\";\n\n\nimport NamespaceSVG from './cluster/ns.svg';\nimport NodeSVG from './cluster/node.svg';\nimport PersistentVolumeSVG from './cluster/pv.svg';\nimport RoleSVG from './cluster/role.svg';\nimport StorageClassSVG from './cluster/sc.svg';\n\nimport CronJobSVG from './workLoad/cronjob.svg';\nimport DaemonSetSVG from './workLoad/ds.svg';\nimport DeploymentSVG from './workLoad/deploy.svg';\nimport JobSVG from './workLoad/job.svg';\nimport PodSVG from './workLoad/pod.svg';\nimport ReplicaSetSVG from './workLoad/rs.svg';\nimport ReplicaControllerSVG from './workLoad/rs.svg';\nimport StatefulSetSVG from './workLoad/sts.svg';\n\nimport IngressSVG from './discoveryandloadbalancing/ing.svg';\nimport ServiceSVG from './discoveryandloadbalancing/svc.svg';\n\nimport ConfigMap from './settingsandstorage/cm.svg';\nimport PersistentVolumeClaimSVG from './settingsandstorage/pvc.svg';\nimport SecretSVG from './settingsandstorage/secret.svg';\n\nimport CustomResourceSVG from './customResource/crd.svg';\n// import Box from \"@material-ui/core/Box\";\n// import Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst clusterImages = [\n    NamespaceSVG, NodeSVG, PersistentVolumeSVG, RoleSVG, StorageClassSVG,\n];\n\nconst workLoadImages = [\n    CronJobSVG, DaemonSetSVG, DeploymentSVG, JobSVG, PodSVG, ReplicaSetSVG, ReplicaControllerSVG,\n    StatefulSetSVG\n]\n\nconst discoveryandloadbalancingImages = [\n    IngressSVG, ServiceSVG\n];\n\nconst settingandstorageImages = [\n    ConfigMap, PersistentVolumeClaimSVG, SecretSVG\n];\n\nconst customResourcesImages = [\n    CustomResourceSVG, CustomResourceSVG, CustomResourceSVG, CustomResourceSVG\n];\n\nconst iconImages = [\n    clusterImages, workLoadImages, discoveryandloadbalancingImages, settingandstorageImages, customResourcesImages\n]\n\nconst MiddleTopicName = [\n    'Status','클러스터', '워크로드','디스커버리 및 로드 밸런싱', '설정 및 스토리지', '커스텀 리소스'\n];\n\nconst TitleSet = [\n\n];\n\nconst cluster = [\n    \"네임스페이스\", \"노드\", \"퍼시스턴트 볼륨\", \"롤\", \"스토리지 클래스\"\n];\n\nconst workLoad = [\n    \"크론 잡\", \"데몬 셋\", \"디플로이먼트\", \"잡\", \"파드(Pod)\",\n    \"레플리카 셋\", \"레플리케이션 컨트롤러\", \"스테이트풀 셋\"\n];\n\nconst disCoveryAndLoadBalancing = [\n    \"인그레스\", \"서비스\"\n];\n\nconst settingAndStorage = [\n    \"컨피그 맵\", \"퍼시스턴트 볼륨 클레임\", \"시크릿\"\n];\n\nconst customresource = [\n    'Instanceset', 'Instances', \"haconfigs\", \"backup\"\n];\n\n// function onClickTest () {\n//     console.log(\"test\");\n// }\n\nconst StyledButton = styled(Button)`\n    width: 100%;\n`;\n\n\n\n\nfunction navigation(prop) {\n\n    const { setBreadcrumb, navopen } = prop;\n\n    const changeHeader = (item, text) => {\n        setBreadcrumb(`${item},${text}`);\n    };\n\n\n    return (\n        <React.Fragment>\n            {\n                navopen === false ? <></> :\n                    <Drawer\n                        variant={\"permanent\"}\n                        anchor={\"left\"}\n                        position={\"fixed\"}\n                        PaperProps={{\n                            style: {\n                                // marginTop: \"4em\"\n                                paddingTop: \"5em\",\n                                paddingLeft: \"0em\",\n                                paddingRight: \"0em\"\n                            }\n                        }}\n                    >\n                        <Toolbar/>\n                        <Container style={{\n                            paddingLeft: \"0em\",\n                            paddingRight: \"0em\"\n                        }}>\n                            <Divider />\n                            <Typography>\n                                <StyledButton>\n                                    {MiddleTopicName[0]}\n                                </StyledButton>\n                            </Typography>\n                            {\n                                [cluster, workLoad, disCoveryAndLoadBalancing, settingAndStorage, customresource]\n                                    .map((item, indexIcon)=>{\n\n                                        return <React.Fragment key={indexIcon}>\n                                            <Divider />\n                                            <Typography>\n                                                <StyledButton onClick={() => changeHeader(MiddleTopicName[indexIcon+1], \"DashBoard\")}>\n                                                    {MiddleTopicName[indexIcon+1]}\n                                                </StyledButton>\n                                            </Typography>\n                                            {\n                                                <List style={{\n                                                    paddingLeft: \"0em\",\n                                                    paddingRight: \"0em\",\n                                                    paddingTop: \"0em\",\n                                                    paddingBottom: \"0em\"\n                                                }}>\n                                                    {\n                                                        item.map((text, index) => {\n                                                            return <React.Fragment key={index}>\n                                                                <ListItem key={text} style={{\n                                                                    paddingLeft: \"0em\", paddingRight: \"0em\",\n                                                                    paddingTop: \"0em\", paddingBottom: \"0em\"\n                                                                }}>\n\n                                                                    <StyledButton onClick={() => changeHeader(MiddleTopicName[indexIcon+1], text)}>\n                                                                        <ListItemIcon>\n                                                                            <img src={iconImages[indexIcon][index]}/>\n                                                                        </ListItemIcon>\n                                                                        <ListItemText primary={\n                                                                            text\n                                                                        }/>\n                                                                    </StyledButton>\n\n                                                                </ListItem>\n                                                            </React.Fragment>\n\n                                                        })\n                                                    }\n                                                </List>\n                                            }\n                                        </React.Fragment>\n                                    })\n                            }\n                        </Container>\n                    </Drawer>\n            }\n\n    </React.Fragment>\n    );\n}\n\nexport default navigation;","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/components/header/Header.js",["88","89","90","91"],"\nimport styled from \"styled-components\";\nimport React from 'react';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {Toolbar} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Input from \"@material-ui/core/Input\";\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\nimport Link from \"@material-ui/core/Link\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Box from \"@material-ui/core/Box\";\nimport Paper from \"@material-ui/core/Paper\";\n\n\n// const StyledBox = styled(Box)`\n//     margin: 0 auto;\n// `;\n//\n// const StyledContainer = styled(Container)`\n//     background-color: skyblue;\n//     margin-left: 0px;\n//     margin-right: 0px;\n//\n// `;\n//\n\nconst handleClick = () => {\n    return \"Hello World\"\n}\n\nconst StyledAppBar = styled(AppBar)`\n    background-color: #6778e5;\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n    background-color: white;\n`;\n\nfunction Header(prop) {\n\n    const { breadcrumb, isnavopen, navopen  } = prop;\n    const breadcrumbs = breadcrumb.split(\",\");\n\n    const handleNavOpen = () => {\n        isnavopen(!navopen)\n    }\n    return <Paper>\n                <StyledAppBar\n                position={\"fixed\"}\n                style={{\n                position: \"fixed\",\n                zIndex: 1201\n                }}\n                >\n                <StyledToolbar>\n                <IconButton>\n                </IconButton>\n                <Typography variant=\"h6\" style={{ flex: 0.4, color: \"black\" }}>\n                KM Console\n                </Typography>\n                <form style={{ flex: 0.5 }}>\n                <Input placeholder=\"resource\" inputProps={{ 'aria-label': 'description' }}></Input>\n                </form>\n                <Button style={{ flex: 0.1 }}>\n                Login\n                </Button>\n                </StyledToolbar>\n\n                <Toolbar style={{ display: \"flex\"}}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"  style={{ display: \"block\" }}\n                            onClick={handleNavOpen} >\n                    <MenuIcon />\n                </IconButton>\n                <Breadcrumbs aria-label={\"breadcrumb\"}>\n                {\n                    breadcrumbs.map((item, index) => {\n                        return <Link color=\"inherit\" key={index}>\n                            {item}\n                        </Link>\n                    })\n                }\n                {/*<Link color={\"inherit\"}>Test</Link>*/}\n                {/*<Link color=\"inherit\" >*/}\n                {/*    Core*/}\n                {/*</Link>*/}\n                {/*<Typography color=\"textPrimary\">Breadcrumb</Typography>*/}\n                </Breadcrumbs>\n                </Toolbar>\n\n                </StyledAppBar>\n\n                {/*    <Toolbar>*/}\n                {/*        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">*/}\n                {/*            <MenuIcon />*/}\n                {/*        </IconButton>*/}\n\n                {/*        <Breadcrumbs aria-label={\"breadcrumb\"}>*/}\n                {/*            <Link color={\"inherit\"} href={\"/\"} ></Link>*/}\n                {/*        </Breadcrumbs>*/}\n                {/*    </Toolbar>*/}\n\n                </Paper>\n\n\n}\n\nexport default Header;\n","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/InstancesetDetailsTable.js",["92","93","94","95","96","97"],"/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/HaconfigTable.js",["98","99","100","101","102"],"import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Box from \"@material-ui/core/Box\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport axios from 'axios'\n\nfunction createData(resource) {\n\n    const { name, namespace, creationTimestamp, generation } = resource.metadata\n    const owner_name  = resource.metadata.ownerReferences[0].name\n    const { healthCheckPeriod, healthCheckTimeout } = resource.spec\n    const { timeSpan, errorCount } = resource.spec.healthCheckRules[0];\n    const { healthcheckConditions } = resource.status;\n    const { instances } = resource.spec\n    const sourcename = resource.spec.topology.name\n    const sourcephase = resource.spec.topology.phase\n    const { children } = resource.spec.topology\n    let templateObject = { timeSpan, errorCount, sourcename, sourcephase,\n        children: children, healthcheckConditions: healthcheckConditions\n    }\n\n    let template_lastObjects = [];\n    instances.forEach((instance, instanceindex) => {\n\n        instance.addresses.forEach((address) => {\n            let perObject = {};\n            perObject['name'] = instance.name\n            perObject['host'] = address.host\n            perObject['port'] = address.port\n            perObject['type'] = address.type\n            template_lastObjects = template_lastObjects.concat(perObject)\n        })\n\n    })\n\n    const { } = resource.status\n\n    return { name, namespace, creationTimestamp, owner_name, healthCheckPeriod, healthCheckTimeout,\n        resource,\n        template:[\n            templateObject ,\n            // 3{\n            //     BackupName, Image, Innodb_buffer_pool_size, key_buffer_size, max_heap_table_size,\n            //     Storage, expire_logs_days, max_connections, default_time_zone, log_bin_trust_function_creators\n            //     tmp_table_size, long_query_time,\n            // }\n        ],\n        template_last:\n            template_lastObjects\n\n    };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'choice', numeric: false, disablePadding: false, label: 'choice' },\n    { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n    { id: 'Creation_Time', numeric: false, disablePadding: true, label: 'Creation Time' },\n    { id: 'Owner_Instanceset', numeric: true, disablePadding: false, label: 'Owner Instanceset' },\n    { id: 'Health_Check_Period', numeric: true, disablePadding: false, label: 'Health_Check_Period (초)' },\n    { id: 'Health_Check_Timeout', numeric: true, disablePadding: false, label: 'Health_Check_Timeout ()' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all instanceset' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Haconfigs Details\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginRight: '10%',\n        marginBottom: '1%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        // minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction Row(props) {\n\n    const { row, isItemSelected, labelId, selected, setSelected,\n        namespace\n    } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n        setSelected(newSelected);\n    };\n\n    const preventHandleClick = (event) => {\n        event.stopPropagation();\n        return setOpen(!open)\n    };\n\n    return <>\n        <TableRow\n            hover\n            onClick={(event) => handleClick(event, row.name)}\n            role=\"checkbox\"\n            aria-checked={isItemSelected}\n            tabIndex={-1}\n            key={row.name}\n            selected={isItemSelected}\n        >\n            <TableCell padding=\"checkbox\">\n                <Checkbox\n                    checked={isItemSelected}\n                    inputProps={{ 'aria-labelledby': labelId }}\n                />\n            </TableCell>\n            <TableCell>\n                <IconButton aria-label=\"expand row\" size=\"small\" onClick={preventHandleClick}>\n                    {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                {row.name}\n            </TableCell>\n            <TableCell align=\"right\">{row.creationTimestamp}</TableCell>\n            <TableCell align=\"right\">{row.owner_name}</TableCell>\n            <TableCell align=\"right\">{row.healthCheckPeriod}</TableCell>\n            <TableCell align=\"right\">{row.healthCheckPeriod}</TableCell>\n        </TableRow>\n        <TableRow>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box margin={1}>\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\n                            Template\n                        </Typography>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell colSpan={2}>Health Check Rules</TableCell>\n                                    <TableCell colSpan={3}>Topology</TableCell>\n                                    <TableCell colSpan={2}>Health Check Conditions</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>Error Count</TableCell>\n                                    <TableCell>Time Span</TableCell>\n                                    <TableCell>Source</TableCell>\n                                    <TableCell>Source Phase</TableCell>\n                                    <TableCell>Replica</TableCell>\n                                    <TableCell>Name</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n\n                                {row.template.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.errorCount}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.timeSpan}\n                                        </TableCell>\n                                        <TableCell>{historyRow.sourcename}</TableCell>\n                                        <TableCell>{historyRow.sourcephase}</TableCell>\n                                        <TableCell>\n\n                                                {\n                                                    historyRow[\"children\"].map((replica, index) => (\n                                                        <TableRow>\n                                                        <TableCell>\n                                                            {replica.name}\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            {replica.phase}\n                                                        </TableCell>\n                                                        </TableRow>\n                                                    ))\n                                                }\n                                        </TableCell>\n                                        <TableCell>\n\n                                                {\n                                                    historyRow[\"healthcheckConditions\"].map((replica, index) => (\n                                                        <TableRow>\n                                                        <TableCell>\n                                                            {replica.name}\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            {replica[\"results\"][0].timestamp}\n                                                        </TableCell>\n                                                        </TableRow>\n                                                            ))\n                                                }\n\n\n                                        </TableCell>\n\n                                    </TableRow>\n                                ))}\n                                {\n\n                                }\n                            </TableBody>\n                        </Table>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Host</TableCell>\n                                    <TableCell>Port</TableCell>\n                                    <TableCell>Type</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {row.template_last.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.name}\n                                        </TableCell>\n                                        <TableCell>{historyRow.host}</TableCell>\n                                        <TableCell>{historyRow.port}</TableCell>\n                                        <TableCell>{historyRow.type}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Box>\n                </Collapse>\n            </TableCell>\n        </TableRow>\n\n    </>\n\n\n}\n\nexport default function HaconfigTable(props) {\n\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('name');\n    const [selected, setSelected] = React.useState([]);\n    const { namespace } = props;\n    const [page, setPage] = React.useState(0);\n    // const [dense, setDense] = React.useState(false);\n    const [rows, setRows] = React.useState([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    React.useEffect(()=>{\n        const callInstancesets = async () => {\n            try{\n                const response = await axios.get(`http://localhost:8080/customresource/haconfig/${namespace}`)\n                if(response.data){\n                    setRows(response.data.map((e)=> {\n                        return createData(e)\n                    }))\n                }\n            }\n            catch (e){\n                console.log(e)\n            }\n        }\n\n        callInstancesets()\n    }, [namespace])\n\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    return <Row row={row} isItemSelected={isItemSelected} labelId={labelId}\n                                                 namespace={namespace}\n                                                 selected={selected} setSelected={setSelected}\n                                            />\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (55) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/InstanceTable.js",["103","104","105","106","107","108"],"import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Box from \"@material-ui/core/Box\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport axios from 'axios'\n\n\nfunction createData(resource) {\n\n    const { name, namespace, creationTimestamp, generation,  } = resource.metadata\n    const owner_name  = resource.metadata.ownerReferences[0].name\n    // const { backupContainer, replicas } = resource.spec\n    const { backupName, image } = resource.spec\n    const { accessModes } = resource.spec.volumeClaim.spec\n    const { storage } = resource.spec.volumeClaim.spec.resources.requests\n    let templateObject = { image, storage, backupName }\n    let template_lastObject = {}\n    resource.spec.options.forEach((e)=>{\n        switch (e[\"name\"]){\n            case \"innodb_buffer_pool_size\":\n            case \"key_buffer_size\":\n            case \"max_heap_table_size\":\n                templateObject[e[\"name\"]] = e[\"value\"]\n                return;\n            case \"expire_logs_days\":\n            case \"max_binlog_size\":\n            case \"max_connections\":\n            case \"server_id\":\n            case \"default-time-zone\":\n            case \"tmp_table_size\":\n            case \"long_query_time\":\n                template_lastObject[e[\"name\"]] = e[\"value\"]\n                return;\n        }\n    })\n    const { } = resource.status\n\n    return { name, namespace, creationTimestamp, owner_name , accessModes,\n        resource,\n        template:[\n            templateObject ,\n            // 3{\n            //     BackupName, Image, Innodb_buffer_pool_size, key_buffer_size, max_heap_table_size,\n            //     Storage, expire_logs_days, max_connections, default_time_zone, log_bin_trust_function_creators\n            //     tmp_table_size, long_query_time,\n            // }\n        ],\n        template_last: [\n            template_lastObject\n        ]\n    };\n}\n\n\n\n// const rows = [\n//     createData('Cupcake', 305, 3.7, 67, 2, 2, 2,'poster-im'),\n//     createData('Donut', 452, 25.0, 51,  2, 2, 2, ''),\n// ];\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n\n\nconst headCells = [\n    { id: 'choice', numeric: false, disablePadding: false, label: 'choice' },\n    { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n    { id: 'namespace', numeric: false, disablePadding: true, label: 'Namespace' },\n    { id: 'Creation_Time', numeric: false, disablePadding: true, label: 'Creation Time' },\n    { id: 'Owner_Instancesets', numeric: true, disablePadding: false, label: 'Owner_Instanceset' },\n    { id: 'Access_Modes', numeric: true, disablePadding: false, label: 'Access Modes' },\n    // { id: 'Namespace', numeric: false, disablePadding: true, label: 'Namespace' }\n    // { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all instanceset' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Instance Details\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginRight: '10%',\n        marginBottom: '1%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        // minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction Row(props) {\n\n    const { row, isItemSelected, labelId, selected, setSelected,\n        namespace\n    } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n        setSelected(newSelected);\n    };\n\n    const preventHandleClick = (event) => {\n        event.stopPropagation();\n        return setOpen(!open)\n    };\n\n    return <>\n        <TableRow\n            hover\n            onClick={(event) => handleClick(event, row.name)}\n            role=\"checkbox\"\n            aria-checked={isItemSelected}\n            tabIndex={-1}\n            key={row.name}\n            selected={isItemSelected}\n        >\n            <TableCell padding=\"checkbox\">\n                <Checkbox\n                    checked={isItemSelected}\n                    inputProps={{ 'aria-labelledby': labelId }}\n                />\n            </TableCell>\n            <TableCell>\n                <IconButton aria-label=\"expand row\" size=\"small\" onClick={preventHandleClick}>\n                    {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                {row.name}\n            </TableCell>\n            <TableCell align=\"right\">{row.namespace}</TableCell>\n            <TableCell align=\"right\">{row.creationTimestamp}</TableCell>\n            <TableCell align=\"right\">{row.owner_name}</TableCell>\n            <TableCell align=\"right\">{row.accessModes}</TableCell>\n        </TableRow>\n        <TableRow>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box margin={1}>\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\n                            Template\n                        </Typography>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Backup Name</TableCell>\n                                    <TableCell>Image</TableCell>\n                                    <TableCell>Innodb_buffer_pool_size</TableCell>\n                                    <TableCell>Key_buffer_size</TableCell>\n                                    <TableCell>max_heap_table_size</TableCell>\n                                    <TableCell>Storage</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {row.template.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.backupName}\n                                        </TableCell>\n                                        <TableCell>{historyRow.image}</TableCell>\n                                        <TableCell>{historyRow.innodb_buffer_pool_size}</TableCell>\n                                        <TableCell>{historyRow.key_buffer_size}</TableCell>\n                                        <TableCell>{historyRow.max_heap_table_size}</TableCell>\n                                        <TableCell>{historyRow.storage}</TableCell>\n\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Expire_logs_days</TableCell>\n                                    <TableCell>Max_connections</TableCell>\n                                    <TableCell>Default_time_zone</TableCell>\n                                    <TableCell>Tmp_table_size</TableCell>\n                                    <TableCell>Max_binlog_size</TableCell>\n                                    <TableCell>Long_query_time</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {row.template_last.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.expire_logs_days}\n                                        </TableCell>\n                                        <TableCell>{historyRow.max_connections}</TableCell>\n                                        <TableCell>{historyRow[\"default-time-zone\"]}</TableCell>\n                                        <TableCell>{historyRow[\"tmp_table_size\"]}</TableCell>\n                                        <TableCell>{historyRow[\"max_binlog_size\"]}</TableCell>\n                                        <TableCell>{historyRow.long_query_time}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Box>\n                </Collapse>\n            </TableCell>\n        </TableRow>\n\n    </>\n\n\n}\n\nexport default function InstanceTable(props) {\n\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('name');\n    const [selected, setSelected] = React.useState([]);\n    const { namespace } = props;\n    const [page, setPage] = React.useState(0);\n    // const [dense, setDense] = React.useState(false);\n    const [rows, setRows] = React.useState([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    React.useEffect(()=>{\n        const callInstances = async () => {\n            try{\n                const response = await axios.get(`http://localhost:8080/customresource/instance/${namespace}`)\n                if(response.data){\n                    setRows(response.data.map((e)=> {\n                        return createData(e)\n                    }))\n                }\n            }\n            catch (e){\n                console.log(e)\n            }\n        }\n\n        callInstances()\n    }, [namespace])\n\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    return <Row row={row} isItemSelected={isItemSelected} labelId={labelId}\n                                                 namespace={namespace} key={index}\n                                                 selected={selected} setSelected={setSelected}\n                                            />\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (55) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n","/Users/kakao_ent/kubernetes-mysql/kube-mysql-console/client/src/pages/BackupTable.js",["109","110","111","112","113"],"import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Box from \"@material-ui/core/Box\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport axios from 'axios'\n\nfunction createData(resource) {\n    const { name, namespace, creationTimestamp, deletionTimestamp, generation, deletionGracePeriodSeconds } = resource.metadata\n    const { finalizers } = resource.metadata\n    const { instanceName, instanceSetName, rootPassword, timeout} = resource.spec\n    const { container, object, segmentContainer } =  resource.spec.storage.swift\n\n    const { phase } = resource.status\n    let templateObject = { instanceName, instanceSetName, rootPassword, deletionGracePeriodSeconds, phase }\n    let template_lastObjects = [\n        {container, object, segmentContainer}\n    ];\n\n    return { name, namespace, creationTimestamp, deletionTimestamp, finalizers,\n        resource,\n        template:[\n            templateObject,\n        ],\n        template_last:\n            template_lastObjects\n\n    };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n\n\nconst headCells = [\n    { id: 'choice', numeric: false, disablePadding: false, label: 'choice' },\n    { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n    { id: 'Creation_Time', numeric: false, disablePadding: true, label: 'Creation Time' },\n    { id: 'Deletion_Time', numeric: false, disablePadding: true, label: 'Deletion Time' },\n    { id: 'Finalizers', numeric: false, disablePadding: true, label: 'Finalizers' },\n\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all instanceset' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Backup Details\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginRight: '10%',\n        marginBottom: '1%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        // minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction Row(props) {\n\n    const { row, isItemSelected, labelId, selected, setSelected,\n        namespace\n    } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n        setSelected(newSelected);\n    };\n\n    const preventHandleClick = (event) => {\n        event.stopPropagation();\n        return setOpen(!open)\n    };\n\n    return <>\n        <TableRow\n            hover\n            onClick={(event) => handleClick(event, row.name)}\n            role=\"checkbox\"\n            aria-checked={isItemSelected}\n            tabIndex={-1}\n            key={row.name}\n            selected={isItemSelected}\n        >\n            <TableCell padding=\"checkbox\">\n                <Checkbox\n                    checked={isItemSelected}\n                    inputProps={{ 'aria-labelledby': labelId }}\n                />\n            </TableCell>\n            <TableCell>\n                <IconButton aria-label=\"expand row\" size=\"small\" onClick={preventHandleClick}>\n                    {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                {row.name}\n            </TableCell>\n            <TableCell>{row.creationTimestamp}</TableCell>\n            <TableCell>{row.deletionTimestamp}</TableCell>\n            <TableCell>{row.finalizers}</TableCell>\n        </TableRow>\n        <TableRow>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box margin={1}>\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\n                            Template\n                        </Typography>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>InstanceName</TableCell>\n                                    <TableCell>InstanceSetName</TableCell>\n                                    <TableCell>Root Password</TableCell>\n                                    <TableCell>Deletion Grace Period Seconds</TableCell>\n                                    <TableCell>Status</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {row.template.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.instanceName}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.instanceSetName}\n                                        </TableCell>\n                                        <TableCell>\n                                            {historyRow.rootPassword}\n                                        </TableCell>\n                                        <TableCell>{historyRow.deletionGracePeriodSeconds}</TableCell>\n                                        <TableCell>{historyRow.phase}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                        <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Container</TableCell>\n                                    <TableCell>Object</TableCell>\n                                    <TableCell>Segment Container</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {row.template_last.map((historyRow, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {historyRow.container}\n                                        </TableCell>\n                                        <TableCell>{historyRow.object}</TableCell>\n                                        <TableCell>{historyRow.segmentContainer}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Box>\n                </Collapse>\n            </TableCell>\n        </TableRow>\n\n    </>\n\n\n}\n\nexport default function BackupTable(props) {\n\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('name');\n    const [selected, setSelected] = React.useState([]);\n    const { namespace } = props;\n    const [page, setPage] = React.useState(0);\n    // const [dense, setDense] = React.useState(false);\n    const [rows, setRows] = React.useState([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    React.useEffect(()=>{\n        const callInstancesets = async () => {\n            try{\n                const response = await axios.get(`http://localhost:8080/customresource/backup/${namespace}`)\n                if(response.data){\n                    setRows(response.data.map((e)=> {\n                        return createData(e)\n                    }))\n                }\n            }\n            catch (e){\n                console.log(e)\n            }\n        }\n\n        callInstancesets()\n    }, [namespace])\n\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    return <Row row={row} isItemSelected={isItemSelected} labelId={labelId}\n                                                 namespace={namespace}\n                                                 selected={selected} setSelected={setSelected}\n                                            />\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (55) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n",{"ruleId":"114","severity":1,"message":"115","line":7,"column":9,"nodeType":"116","messageId":"117","endLine":7,"endColumn":24},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"114","severity":1,"message":"122","line":9,"column":7,"nodeType":"116","messageId":"117","endLine":9,"endColumn":24},{"ruleId":"114","severity":1,"message":"123","line":23,"column":11,"nodeType":"116","messageId":"117","endLine":23,"endColumn":18},{"ruleId":"114","severity":1,"message":"124","line":26,"column":12,"nodeType":"116","messageId":"117","endLine":26,"endColumn":18},{"ruleId":"114","severity":1,"message":"125","line":26,"column":20,"nodeType":"116","messageId":"117","endLine":26,"endColumn":28},{"ruleId":"114","severity":1,"message":"126","line":5,"column":9,"nodeType":"116","messageId":"117","endLine":5,"endColumn":21},{"ruleId":"114","severity":1,"message":"127","line":5,"column":23,"nodeType":"116","messageId":"117","endLine":5,"endColumn":32},{"ruleId":"114","severity":1,"message":"128","line":5,"column":34,"nodeType":"116","messageId":"117","endLine":5,"endColumn":39},{"ruleId":"114","severity":1,"message":"129","line":5,"column":41,"nodeType":"116","messageId":"117","endLine":5,"endColumn":51},{"ruleId":"114","severity":1,"message":"130","line":5,"column":53,"nodeType":"116","messageId":"117","endLine":5,"endColumn":62},{"ruleId":"114","severity":1,"message":"131","line":46,"column":7,"nodeType":"116","messageId":"117","endLine":46,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":46,"column":9,"nodeType":"134","messageId":"135","endLine":55,"endColumn":10},{"ruleId":"114","severity":1,"message":"136","line":71,"column":7,"nodeType":"116","messageId":"117","endLine":71,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":172,"column":77,"nodeType":"139","endLine":172,"endColumn":118},{"ruleId":"114","severity":1,"message":"140","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":15},{"ruleId":"114","severity":1,"message":"141","line":10,"column":8,"nodeType":"116","messageId":"117","endLine":10,"endColumn":14},{"ruleId":"114","severity":1,"message":"142","line":15,"column":8,"nodeType":"116","messageId":"117","endLine":15,"endColumn":11},{"ruleId":"114","severity":1,"message":"143","line":31,"column":7,"nodeType":"116","messageId":"117","endLine":31,"endColumn":18},{"ruleId":"114","severity":1,"message":"144","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"145","line":28,"column":49,"nodeType":"116","messageId":"117","endLine":28,"endColumn":59},{"ruleId":"132","severity":1,"message":"133","line":36,"column":9,"nodeType":"134","messageId":"135","endLine":49,"endColumn":10},{"ruleId":"146","severity":1,"message":"147","line":51,"column":11,"nodeType":"148","messageId":"149","endLine":51,"endColumn":14},{"ruleId":"114","severity":1,"message":"150","line":247,"column":7,"nodeType":"116","messageId":"117","endLine":247,"endColumn":19},{"ruleId":"114","severity":1,"message":"151","line":258,"column":9,"nodeType":"116","messageId":"117","endLine":258,"endColumn":18},{"ruleId":"114","severity":1,"message":"144","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"145","line":29,"column":49,"nodeType":"116","messageId":"117","endLine":29,"endColumn":59},{"ruleId":"146","severity":1,"message":"147","line":56,"column":11,"nodeType":"148","messageId":"149","endLine":56,"endColumn":14},{"ruleId":"114","severity":1,"message":"150","line":249,"column":7,"nodeType":"116","messageId":"117","endLine":249,"endColumn":19},{"ruleId":"114","severity":1,"message":"151","line":260,"column":9,"nodeType":"116","messageId":"117","endLine":260,"endColumn":18},{"ruleId":"114","severity":1,"message":"144","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"145","line":30,"column":49,"nodeType":"116","messageId":"117","endLine":30,"endColumn":59},{"ruleId":"132","severity":1,"message":"133","line":39,"column":9,"nodeType":"134","messageId":"135","endLine":54,"endColumn":10},{"ruleId":"146","severity":1,"message":"147","line":56,"column":11,"nodeType":"148","messageId":"149","endLine":56,"endColumn":14},{"ruleId":"114","severity":1,"message":"150","line":260,"column":7,"nodeType":"116","messageId":"117","endLine":260,"endColumn":19},{"ruleId":"114","severity":1,"message":"151","line":271,"column":9,"nodeType":"116","messageId":"117","endLine":271,"endColumn":18},{"ruleId":"114","severity":1,"message":"144","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"145","line":28,"column":68,"nodeType":"116","messageId":"117","endLine":28,"endColumn":78},{"ruleId":"114","severity":1,"message":"152","line":30,"column":58,"nodeType":"116","messageId":"117","endLine":30,"endColumn":65},{"ruleId":"114","severity":1,"message":"150","line":227,"column":7,"nodeType":"116","messageId":"117","endLine":227,"endColumn":19},{"ruleId":"114","severity":1,"message":"151","line":238,"column":9,"nodeType":"116","messageId":"117","endLine":238,"endColumn":18},"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","no-native-reassign",["153"],"no-negated-in-lhs",["154"],"'ContainerFragment' is assigned a value but never used.","'classes' is assigned a value but never used.","'change' is assigned a value but never used.","'onchange' is assigned a value but never used.","'ArgumentAxis' is defined but never used.","'BarSeries' is defined but never used.","'Chart' is defined but never used.","'LineSeries' is defined but never used.","'ValueAxis' is defined but never used.","'test_data' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'TitleSet' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Divider' is defined but never used.","'Drawer' is defined but never used.","'Box' is defined but never used.","'handleClick' is assigned a value but never used.","'useEffect' is defined but never used.","'generation' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'useRowStyles' is assigned a value but never used.","'namespace' is assigned a value but never used.","'timeout' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]